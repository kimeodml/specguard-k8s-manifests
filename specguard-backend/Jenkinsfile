pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_VERSION', defaultValue: '', description: 'Docker Image Version')
        string(name: 'DID_BUILD_JAVA', defaultValue: '', description: 'Java Builded boolean')
        string(name: 'DID_BUILD_PYTHON', defaultValue: '', description: 'Python Builded boolean')
    }

    
    stages {
        stage('Checkout Main Branches') {
            steps {
                sh 'git checkout main'
                echo "DOCKER_IMAGE_VERSION: ${params.DOCKER_IMAGE_VERSION}"
                echo "DID_BUILD_JAVA: ${params.DID_BUILD_JAVA}"
                echo "DID_BUILD_PYTHON: ${params.DID_BUILD_PYTHON}"
            }
        }

        stage('update Python deploy.yaml') {
            when {
                expression {
                    return params.DID_BUILD_PYTHON == "true"
                }
            }

            steps {
                // Jenkins 파이프라인에서 작업 디렉터리를 변경할 때 사용한다.
                dir('specguard-backend/python') {
                    sh 'pwd'
                    sh 'ls -al'
                    echo "Received Docker Image Version : ${params.DOCKER_IMAGE_VERSION}"
                    sh 'git checkout main'
                    sh "sed -i 's|viroovr/specguard-nlp:.*|viroovr/specguard-nlp:${params.DOCKER_IMAGE_VERSION}|g' deploy.yaml"
                    sh 'cat deploy.yaml'
                }
            }
        }

        stage('update Java deploy.yaml') {
            when {
                expression {
                    return params.DID_BUILD_JAVA == "true"
                }
            }

            steps {
                // Jenkins 파이프라인에서 작업 디렉터리를 변경할 때 사용한다.
                dir('specguard-backend/java') {
                    sh 'pwd'
                    sh 'ls -al'
                    echo "Received Docker Image Version : ${params.DOCKER_IMAGE_VERSION}"
                    sh 'git checkout main'
                    sh "sed -i 's|viroovr/specguard-api:.*|viroovr/specguard-api:${params.DOCKER_IMAGE_VERSION}|g' deploy.yaml"
                    sh 'cat deploy.yaml'
                }
            }
        }

        stage('Commit & Push') {
            when {
                expression {
                    return params.DID_BUILD_PYTHON == "true" || params.DID_BUILD_JAVA == "true"
                }
            }

            steps {
                sh 'git config --list'
                sh 'git config user.name "jenkins"'
                sh 'git config user.email "jenkins@beyond.com"'

            // 변경된 파일 있는지 확인
            script {
                def changes = sh(script: "git status --porcelain", returnStdout: true).trim()
                if (changes) {
                    echo "🔹 변경 사항 감지됨 → 커밋 및 푸시 실행"

                    sh 'git add .'
                    sh "git commit -m '[Auto] update image version ${params.DOCKER_IMAGE_VERSION}'"
                    
                    sshagent(['specguard-k8s-manifests']) {
                        sh 'git push origin main'
                    }
                } else {
                    echo "⚪ 변경 사항 없음 → 커밋/푸시 생략"
                }
            }
        }
    }
}
